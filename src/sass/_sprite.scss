/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
$facebook-name: 'facebook';
$facebook-x: 0px;
$facebook-y: 0px;
$facebook-offset-x: 0px;
$facebook-offset-y: 0px;
$facebook-width: 30px;
$facebook-height: 30px;
$facebook-total-width: 70px;
$facebook-total-height: 70px;
$facebook-image: '../images/sprite.png';
$facebook: (0px, 0px, 0px, 0px, 30px, 30px, 70px, 70px, '../images/sprite.png', 'facebook', );
$line-name: 'line';
$line-x: 40px;
$line-y: 0px;
$line-offset-x: -40px;
$line-offset-y: 0px;
$line-width: 30px;
$line-height: 30px;
$line-total-width: 70px;
$line-total-height: 70px;
$line-image: '../images/sprite.png';
$line: (40px, 0px, -40px, 0px, 30px, 30px, 70px, 70px, '../images/sprite.png', 'line', );
$pinterest-name: 'pinterest';
$pinterest-x: 0px;
$pinterest-y: 40px;
$pinterest-offset-x: 0px;
$pinterest-offset-y: -40px;
$pinterest-width: 30px;
$pinterest-height: 30px;
$pinterest-total-width: 70px;
$pinterest-total-height: 70px;
$pinterest-image: '../images/sprite.png';
$pinterest: (0px, 40px, 0px, -40px, 30px, 30px, 70px, 70px, '../images/sprite.png', 'pinterest', );
$twitter-name: 'twitter';
$twitter-x: 40px;
$twitter-y: 40px;
$twitter-offset-x: -40px;
$twitter-offset-y: -40px;
$twitter-width: 30px;
$twitter-height: 30px;
$twitter-total-width: 70px;
$twitter-total-height: 70px;
$twitter-image: '../images/sprite.png';
$twitter: (40px, 40px, -40px, -40px, 30px, 30px, 70px, 70px, '../images/sprite.png', 'twitter', );
$spritesheet-width: 70px;
$spritesheet-height: 70px;
$spritesheet-image: '../images/sprite.png';
$spritesheet-sprites: ($facebook, $line, $pinterest, $twitter, );
$spritesheet: (70px, 70px, '../images/sprite.png', $spritesheet-sprites, );

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
